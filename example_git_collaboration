# https://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/


Firstly you need a local fork of the the project, so go ahead and press the “fork” button in GitHub.
This will create a copy of the repository in your own GitHub account:

$ git clone git@github.com:akrabat/zend-validator.git


Finally, in this stage, you need to set up a new remote that points to the original project so that
you can grab any changes and bring them into your local copy. Firstly clock on the link to the
original repository – it’s labeled “Forked from” at the top of the GitHub page. This takes you back
to the projects main GitHub page, so you can find the “SSH clone URL” and use it to create the new
remote, which we’ll call upstream.

$ git remote add upstream git@github.com:zendframework/zend-validator.git


Firstly we ensure we’re on the master branch. Then the git pull command will sync our local copy with
the upstream project and the git push syncs it to our forked GitHub project. Finally we create our
new branch. You can name your branch whatever you like, but it helps for it to be meaningful.
Including the issue number is usually helpful.

$ git checkout master
$ git pull upstream master && git push origin master
$ git checkout -b hotfix/readme-update


To create a PR you need to push your branch to the origin remote and then press some buttons on GitHub.
To push a new branch:

$ git push -u origin hotfix/readme-update

go onto github in your forked repo and press the button for a pull request (PR)

---------

To sum up

That’s all there is to it. The fundamentals are:

    Fork the project & clone locally.
    Create an upstream remote and sync your local copy before you branch.
    Branch for each separate piece of work.
    Do the work, write good commit messages, and read the CONTRIBUTING file if there is one.
    Push to your origin repository.
    Create a new PR in GitHub.
    Respond to any code review feedback.
